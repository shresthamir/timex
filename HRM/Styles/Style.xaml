<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"                    
                    
                   xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    mc:Ignorable="d"
                   >
    <!--<vc:BooleanToVisiblityConverter x:Key="BoolToVisibility"/>
    <vc:TimeSpanToDateConverter x:Key="TimeToDate"/>
    <vc:DateToMitiConverter x:Key="ToMiti"/>
    <vc:ReverseBoolConverter x:Key="ReverseBool"/>
    <vc:longConverter x:Key="NumZeroToEmptyString"/>
    <vc:ReqFieldVisibilityConverter x:Key="ReqCharVisible"/>
    <vc:LanguageConverter x:Key="Translate"/>
    <vc:PendingTranStateConverter x:Key="TranState"/>-->

    <Style x:Key="GradientBackground" TargetType="{x:Type Border}">
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
					<GradientStop  Offset="4"/>
					<GradientStop Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrush" Value="Black"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="CornerRadius" Value="2"/>
		<Setter Property="Margin" Value="2"/>
	</Style>
    
	<Style x:Key="PlainBackground" TargetType="{x:Type Border}">
		<Setter Property="Background">
			<Setter.Value>
				<LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0">
                    <GradientStop Color="#FFEFEFF2"/>
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="Black"/>
		<Setter Property="CornerRadius" Value="2"/>
		<Setter Property="Margin" Value="2"/>
	</Style>
    <Style x:Key="NumericColumn" TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
    </Style>
    <Style x:Key="NumericBoldColumn" TargetType="{x:Type DataGridCell}">
        <Setter Property="HorizontalContentAlignment" Value="Right"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>
   
    <Style x:Key="ReportButtons" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsFocused"  Value="true">
                <Setter Property="Background" Value="BlanchedAlmond"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Height" Value="26"/>   
        <Setter Property="VerticalContentAlignment" Value="Center"/>        
        <!--<Setter Property="InputLanguageManager.InputLanguage" Value="{x:Static Member= Lib:GlobalClass.CurCulture}"/>-->
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel>
                        <Grid DockPanel.Dock="Right" Width="16" Height="16" VerticalAlignment="Center" Margin="3 0 0 0">
                            <Ellipse Width="16" Height="16" Fill="Red"/>
                            <Ellipse Width="3" Height="8" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0 2 0 0" Fill="White"/>
                            <Ellipse Width="2" Height="2" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0 0 0 2" Fill="White"/>
                        </Grid>
                        <AdornedElementPlaceholder/>
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="BlanchedAlmond" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type DatePicker}">
        <Setter Property="Height" Value="26"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel>
                        <Grid DockPanel.Dock="Right" Width="16" Height="16" VerticalAlignment="Center" Margin="3 0 0 0">
                            <Ellipse Width="16" Height="16" Fill="Red"/>
                            <Ellipse Width="3" Height="8" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0 2 0 0" Fill="White"/>
                            <Ellipse Width="2" Height="2" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0 0 0 2" Fill="White"/>
                        </Grid>
                        <AdornedElementPlaceholder/>

                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="BlanchedAlmond" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="28"/>
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <DockPanel>
                        <Grid DockPanel.Dock="Right" Width="16" Height="16" VerticalAlignment="Center" Margin="3 0 0 0">
                            <Ellipse Width="16" Height="16" Fill="Red"/>
                            <Ellipse Width="3" Height="8" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0 2 0 0" Fill="White"/>
                            <Ellipse Width="2" Height="2" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0 0 0 2" Fill="White"/>
                        </Grid>
                        <AdornedElementPlaceholder/>

                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="BlanchedAlmond" />
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="Label">
        <Setter Property="Width" Value="120"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style x:Key="RowStackPanel" TargetType="StackPanel">
        <Setter Property="Margin" Value="5 5 0 0"/>
        <Setter Property="Orientation" Value="Horizontal"/>
    </Style>
    <Style x:Key="BoldRow" TargetType="DataGridRow">
        <Setter Property="FontWeight" Value="SemiBold"/>              
    </Style>

    <Style TargetType="{x:Type Button}" x:Key="ButtonStyle">
        <Setter Property="Height" Value="28"/>
        <Setter Property="Width" Value="60"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid">
                        <Border x:Name="border" CornerRadius="1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" BorderThickness="1">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Offset="1" Color="White"/>
                                    <GradientStop Offset="0.5" Color="{DynamicResource {x:Static SystemColors.ControlLightColorKey}}"/>
                                    <GradientStop Offset="0" Color="White"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <ContentPresenter HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         TextElement.FontWeight="Bold"></ContentPresenter>
                        </Border>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <RadialGradientBrush GradientOrigin="0.496,1.052">
                                        <RadialGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5"/>
                                                <TranslateTransform X="0.02" Y="0.3"/>
                                            </TransformGroup>
                                        </RadialGradientBrush.RelativeTransform>
                                        <GradientStop Color="#00000000" Offset="1"/>
                                        <GradientStop Color="#FF303030" Offset="0.3"/>
                                    </RadialGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF33962B"/>
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,0" MappingMode="RelativeToBoundingBox" StartPoint="0,1">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="#FDFFC910" Offset="0.25"/>
                                        <GradientStop Color="#FDFFC910" Offset="0.4"/>
                                        <GradientStop Color="White" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF33962B"/>
                            <Setter Property="Background" TargetName="border">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0,0" MappingMode="RelativeToBoundingBox" StartPoint="0,1">
                                        <GradientStop Color="White" Offset="0"/>
                                        <GradientStop Color="#FDFFC910" Offset="0.25"/>
                                        <GradientStop Color="BlanchedAlmond" Offset="0.5"/>
                                        <GradientStop Color="#FDFFC910" Offset="0.75"/>
                                        <GradientStop Color="White" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" TargetName="grid" Value="0.25"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="Board" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <RadialGradientBrush GradientOrigin="0.496,1.052">
                    <RadialGradientBrush.RelativeTransform>
                        <TransformGroup>
                            <ScaleTransform CenterX="0.5" CenterY="0.5" 
                                   ScaleX="1.5" ScaleY="1.5"/>
                            <TranslateTransform X="0.02" Y="0.3"/>
                        </TransformGroup>
                    </RadialGradientBrush.RelativeTransform>
                    <GradientStop Offset="1" Color="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionColorKey}}"/>
                    <GradientStop Offset="0.5" Color="{DynamicResource {x:Static SystemColors.InactiveBorderColorKey}}"/>
                </RadialGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="2"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Padding" Value="2"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=DataContext, RelativeSource={RelativeSource Self}, Converter={StaticResource TranState}}" Value="1">
                <Setter Property="Background" Value="BlanchedAlmond"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=DataContext, RelativeSource={RelativeSource Self}, Converter={StaticResource TranState}}" Value="2">
                <Setter Property="Background" Value="Red"></Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBlock" x:Key="Label">
        <Setter Property="Padding" Value="5 2 0 0"/>
        <Setter Property="Height" Value="26"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="Watermark">
        <Setter Property="Padding" Value="3 1"/>
        <Setter Property="Opacity" Value="0.5"/>
        <Setter Property="VerticalAlignment" Value="Center"/>     
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>
    
    <Style TargetType="Grid" x:Key="WatermarkGrid">
        <Setter Property="Height" Value="26"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
    </Style>
    
   

    <Style x:Key="TreeViewStyle" TargetType="{x:Type TreeView}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
            <LinearGradientBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <!--<GradientStop Color="#FFE0F0FF" Offset="0"/>
                <GradientStop Color="#FFABE0FF" Offset="1"/>-->
                <GradientStop Color="BlanchedAlmond" Offset="0"/>
                <GradientStop Color="BlanchedAlmond" Offset="5"/>
            </LinearGradientBrush>
            <LinearGradientBrush x:Key="{x:Static SystemColors.ControlBrushKey}" EndPoint="0,1" StartPoint="0,0">
                <GradientStop Color="#FFEEEEEE" Offset="0"/>
                <GradientStop Color="#FFDDDDDD" Offset="1"/>
            </LinearGradientBrush>
        </Style.Resources>

        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="ItemContainerStyle">

            <Setter.Value>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Style.Resources>
                        <Style TargetType="{x:Type Border}">
                            <Setter Property="CornerRadius" Value="3"/>
                        </Style>
                    </Style.Resources>
                    <Setter Property="BorderThickness" Value="1.5"/>
                    <Setter Property="IsSelected" Value="{Binding IsNodeSelected, Mode=TwoWay}"/>
                    <Setter Property="IsExpanded" Value="{Binding IsNodeExpanded, Mode=TwoWay}" />
                    <!--<Setter Property="Visibility" Value="{Binding Path=IsMatch, Mode=OneWay, Converter={StaticResource  ResourceKey=boolToVisibility}}"/>-->
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="#FFABC0F0"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsSelectionActive" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="LightGray"/>
                        </MultiTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>